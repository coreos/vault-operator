#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

if [ -z "${PASSES-}" ]; then
	PASSES="build e2e unit"
fi

function build_pass {
	IMAGE=$OPERATOR_IMAGE hack/build
	IMAGE=$OPERATOR_IMAGE hack/push
}

function unit_pass {
	TEST_PKGS=`go list ./cmd/... ./pkg/...`
	for pkg in $TEST_PKGS
	do
		go test $pkg
	done
}

function e2e_pass {
	# Setup test namespace, RBAC rules and pull secret
	source hack/ci/utils.sh
	trap cleanup_all EXIT
	if setup_all ; then
		echo "Namespace, RBAC and pull secret setup success! ==="
	else
		echo "Namespace, RBAC and pull secret setup fail! ==="
		exit 1
	fi

	cp ${KUBECONFIG} _output/kubeconfig
	go test -c "./test/e2e/" --race -o _output/bin/e2e.test
	docker run --rm \
	  -v="${PWD}/_output:/e2etest" \
	  golang:1.9 \
	  /e2etest/bin/e2e.test -test.timeout=30m --kubeconfig=/e2etest/kubeconfig --operator-image=${OPERATOR_IMAGE} --namespace=${TEST_NAMESPACE}
}

function upgrade_pass {
	# Setup test namespace, RBAC rules and pull secret
	source hack/ci/utils.sh
	trap cleanup_all EXIT
	if setup_all ; then
		echo "Namespace, RBAC and pull secret setup success! ==="
	else
		echo "Namespace, RBAC and pull secret setup fail! ==="
		exit 1
	fi

	# TODO: Run upgrade tests in docker
	go test -v "./test/e2e/upgradetest" -timeout 30m --race --kubeconfig=${KUBECONFIG} --namespace=${TEST_NAMESPACE} \
		--old-vop-image=$UPGRADE_FROM \
		--new-vop-image=$UPGRADE_TO
}

for p in $PASSES; do
	${p}_pass
done

echo "=== success ==="

